=======Tasks not submitted in JUDGE=======

--SECTION 2 --Task 1

INSERT INTO Flights (FlightID, DepartureTime, ArrivalTime, [Status], OriginAirportID, DestinationAirportID, AirlineID)
VALUES (1,'2016-10-13 06:00 AM','2016-10-13 10:00 AM','Delayed',1,4,1),
(2,'2016-10-12 12:00 PM','2016-10-12 12:01 PM','Departing',1,3,2),
(3,'2016-10-14 03:00 PM','2016-10-20 04:00 AM','Delayed',4,2,4),
(4,'2016-10-12 01:24 PM','2016-10-12 4:31 PM','Departing',3,1,3),
(5,'2016-10-12 08:11 AM','2016-10-12 11:22 PM','Departing',4,1,1),
(6,'1995-06-21 12:30 PM','1995-06-22 08:30 PM','Arrived',2,3,5),
(7,'2016-10-12 11:34 PM','2016-10-13 03:00 AM','Departing',2,4,2),
(8,'2016-11-11 01:00 PM','2016-11-12 10:00 PM','Delayed',4,3,1),
(9,'2015-10-01 12:00 PM','2015-12-01 01:00 AM','Arrived',1,2,1),
(10,'2016-10-12 07:30 PM','2016-10-13 12:30 PM','Departing',2,1,7)

INSERT INTO Tickets (TicketID, Price, Class, Seat, CustomerID, FlightID)
VALUES (1,3000.00,'First','233-A',3,8),
(2,1799.90,'Second','123-D',1,1),
(3,1200.50,'Second','12-Z',2,5),
(4,410.68,'Third','45-Q',2,8),
(5,560.00,'Third','201-R',4,6),
(6,2100.00,'Second','13-T',1,9),
(7,5500.00,'First','98-O',2,7)



--SECTION 2 --Task 5

INSERT INTO CustomerReviews (ReviewID, ReviewContent, ReviewGrade, AirlineID, CustomerID)
VALUES (1,'Me is very happy. Me likey this airline. Me good.',10,1,1),
(2,'Ja, Ja, Ja... Ja, Gut, Gut, Ja Gut! Sehr Gut!',10,1,4),
(3,'Meh...',5,4,3),
(4,'Well Ive seen better, but Ive certainly seen a lot worse...',7,3,5)

INSERT INTO CustomerBankAccounts (AccountID, AccountNumber, Balance, CustomerID)
VALUES (1,'123456790',2569.23,1),
(2,'18ABC23672',14004568.23,2),
(3,'F0RG0100N3',19345.20,5)



--SECTION 3 --Task 6

SELECT DISTINCT c.CustomerID, c.FirstName + ' ' + c.LastName AS FullName, t2.TownName AS HomeTown
  FROM Customers AS c
 INNER JOIN Tickets AS t
    ON t.CustomerID = c.CustomerID
 INNER JOIN Flights AS f
    ON t.FlightID = f.FlightID
 INNER JOIN Airports AS a
    ON f.OriginAirportID = a.AirportID
 INNER JOIN Towns AS t1
    ON t1.TownID = a.TownID
 INNER JOIN Towns AS t2
    ON t2.TownID = c.HomeTownID
   AND t2.TownID = t1.TownID
 ORDER BY c.CustomerID



--SECTION 3 --Task 7

SELECT DISTINCT c.CustomerID, 
	   	c.FirstName + ' ' + c.LastName AS FullName,
	   	DATEDIFF(YEAR,c.DateOfBirth,'2016') AS Age
  FROM Customers AS c
 INNER JOIN Tickets AS t
    ON t.CustomerID = c.CustomerID
 INNER JOIN Flights AS f
    ON t.FlightID = f.FlightID
 WHERE f.[Status] = 'Departing'
 ORDER BY Age, c.CustomerID



--SECTION 3 --Task 8

SELECT TOP 3 c.CustomerID, 
	     c.FirstName + ' ' + c.LastName AS FullName,
	     t.Price AS TicketPrice, 
	     a.AirportName AS Destination
  FROM Customers AS c
 INNER JOIN Tickets AS t
    ON t.CustomerID = c.CustomerID
 INNER JOIN Flights AS f
    ON t.FlightID = f.FlightID
 INNER JOIN Airports AS a
    ON a.AirportID = f.DestinationAirportID
 WHERE f.[Status] = 'Delayed'
 ORDER BY t.Price DESC, c.CustomerID



--SECTION 3 --Task 9

SELECT TOP 5 f.FlightID,
	   f.DepartureTime,
	   f.ArrivalTime,
	   a1.AirportName AS Origin,
	   a2.AirportName AS Destination
  FROM Flights AS f
 INNER JOIN Airports AS a1
    ON f.OriginAirportID = a1.AirportID
 INNER JOIN Airports AS a2
    ON f.DestinationAirportID = a2.AirportID
 WHERE f.[Status] = 'Departing'
 ORDER BY f.DepartureTime, f.FlightID



--SECTION 3 --Task 10

SELECT c.CustomerID, 
       c.FirstName + ' ' + c.LastName AS FullName,
       DATEDIFF(YEAR,c.DateOfBirth,'2016') AS Age
  FROM Customers AS c
 INNER JOIN Tickets AS t
    ON t.CustomerID = c.CustomerID
 INNER JOIN Flights AS f
    ON t.FlightID = f.FlightID
 WHERE f.[Status] = 'Arrived'
   AND DATEDIFF(YEAR,c.DateOfBirth,'2016') < 21
 ORDER BY Age DESC, c.CustomerID



--SECTION 3 --Task 11

SELECT a.AirportID, a.AirportName, COUNT(c.CustomerID) AS Passengers
  FROM Airports AS a
 INNER JOIN Flights AS f
    ON f.OriginAirportID = a.AirportID
   AND f.[Status] = 'Departing'
 INNER JOIN Tickets AS t
    ON t.FlightID = f.FlightID
 INNER JOIN Customers AS c
    ON t.CustomerID = c.CustomerID
 GROUP BY a.AirportID, a.AirportName
 ORDER BY a.AirportID



--SECTION 4 --Task 1

CREATE PROC usp_SubmitReview (@CustomerID INT, @ReviewContent TEXT, @ReviewGrade INT, @AirlineName VARCHAR(30))
    AS
 BEGIN

	BEGIN TRAN

	DECLARE @AirlineID INT = (SELECT AirlineID FROM Airlines
				   WHERE AirlineName = @AirlineName)

	IF (@AirlineID IS NULL)
		BEGIN
				RAISERROR('Airline does not exist.',16,1)
				ROLLBACK
		  END
	ELSE
		BEGIN
			DECLARE @ReviewID INT

			IF NOT EXISTS (SELECT * FROM CustomerReviews)
				BEGIN
						SET @ReviewID = 1
				  END
			ELSE
				BEGIN
						SET @ReviewID = (SELECT TOP 1 ReviewID FROM CustomerReviews ORDER BY ReviewID DESC) + 1
				  END

			INSERT INTO CustomerReviews (ReviewID, ReviewContent, ReviewGrade, AirlineID, CustomerID)
			VALUES (@ReviewID, @ReviewContent, @ReviewGrade, @AirlineID, @CustomerID)
		
			IF (@ReviewGrade NOT BETWEEN 0 AND 10)
				BEGIN
						ROLLBACK
				  END
			ELSE
				BEGIN
						COMMIT
				  END
		  END
   END



--SECTION 4 --Task 2

CREATE PROC usp_PurchaseTicket (@CustomerID INT, @FlightID INT, @TicketPrice DECIMAL(8,2), @Class VARCHAR(6), @Seat VARCHAR(5))
    AS
 BEGIN

	BEGIN TRAN

	DECLARE @TicketID INT

	IF NOT EXISTS (SELECT * FROM Tickets)
		BEGIN
				SET @TicketID = 1
		END
	ELSE
		BEGIN
				SET @TicketID = (SELECT TOP 1 TicketID FROM Tickets ORDER BY TicketID DESC) + 1
		END

	INSERT INTO Tickets (TicketID, Price, Class, Seat, CustomerID, FlightID)
	VALUES (@TicketID, @TicketPrice, @Class, @Seat, @CustomerID, @FlightID)

	UPDATE CustomerBankAccounts
	   SET Balance -= @TicketPrice
	 WHERE CustomerID = @CustomerID

	DECLARE @AccountBalance DECIMAL(10,2) = (SELECT Balance FROM CustomerBankAccounts
						  WHERE CustomerID = @CustomerID)

	IF (@TicketPrice > @AccountBalance)
		BEGIN
				RAISERROR('Insufficient bank account balance for ticket purchase.',16,1)
				ROLLBACK
		  END
	ELSE
		BEGIN
				COMMIT
		  END
   END



--SECTION 5 --Task 1 (BONUS)

 CREATE TRIGGER tr_Flights
     ON Flights
INSTEAD OF UPDATE
     AS
  BEGIN

	DECLARE @FlightID INT = (SELECT FlightID FROM inserted)
	DECLARE @Status VARCHAR(9) = (SELECT [Status] FROM inserted)

	UPDATE Flights
	   SET [Status] = @Status
	 WHERE FlightID = @FlightID

	IF (@Status = 'Arrived')
		BEGIN
				DECLARE @ArrivalTime DATETIME = (SELECT ArrivalTime FROM inserted)
				DECLARE @Origin VARCHAR(50) = (SELECT a.AirportName FROM inserted AS i
								INNER JOIN Airports AS a
								   ON i.OriginAirportID = a.AirportID)

				DECLARE @Destination VARCHAR(50) = (SELECT a.AirportName FROM inserted AS i
								     INNER JOIN Airports AS a
								        ON i.DestinationAirportID = a.AirportID)

				DECLARE @Passengers INT = (SELECT COUNT(c.CustomerID) FROM Customers AS c
							    INNER JOIN Tickets AS t
							       ON t.CustomerID = c.CustomerID
							    INNER JOIN Flights AS f
							       ON t.FlightID = f.FlightID
							      AND f.FlightID = @FlightID)

				INSERT INTO ArrivedFlights (FlightID, ArrivalTime, Origin, Destination, Passengers)
				VALUES (@FlightID, @ArrivalTime, @Origin, @Destination, @Passengers)
		  END
    END